/**
 * @param {number[]} nums
 * @return {number[]}
 */

const insertSort = (nums) => {
    let next = 1
    while(next < nums.length) {
        const nextVal = nums[next]
        let l = 0,
            r = next - 1
        while(l <= r) {
            const mid = Math.floor((l+r) / 2)
            if (nextVal > nums[mid]) {
                l = mid + 1
            } else {
                r = mid - 1
            }
        }
        if (r < next) {
            for (let move = next - 1; move > r; --move) {
                nums[move + 1] = nums[move]
            }
            nums[r + 1] = nextVal
        }
        ++next;
    }
}

const selectSort = (nums) => {
    for (let i = 0; i < nums.length - 1; ++i) {
        let minIdx = i
        for (let j = i; j < nums.length; ++j) {
            if (nums[j] < nums[minIdx]) {
                minIdx = j
            }
        }
        const temp = nums[minIdx]
        nums[minIdx] = nums[i]
        nums[i] = temp
    }
}

const bubbleSort = nums => {
    for(let i = nums.length - 1; i > 0; --i) {
        for (let j = 0; j < i; ++j) {
            if (nums[j] > nums[j + 1]) {
                let temp = nums[j]
                nums[j] = nums[j + 1]
                nums[j + 1] = temp
            }
        }
    }
}

const mergeSort = (nums, l, r) => {
    const merge = (nums, low, high, mid) => {
        // TODO: 原地归并
        const arr = new Array(high - low + 1)
        let l = low,
            r = mid + 1,
            current = 0
        while(current < high && r <= high && l <= mid) {
            if (nums[l] <= nums[r]) {
                arr[current++] = nums[l++]
            } else {
                arr[current++] = nums[r++]
            }
        }
        while (r <= high) {
            arr[current++] = nums[r++]
        }
        while (l <= mid) {
            arr[current++] = nums[l++]
        }
        nums.splice(low, arr.length, ...arr)
    }

    if (l < r) {
        const mid = Math.floor((l + r) /2)
        mergeSort(nums, l, mid)
        mergeSort(nums, mid + 1, r)
        merge(nums, l, r, mid)
    }
}


var sortedSquares = function(nums) {
    const ret = nums.map(n => Math.pow(n, 2))
    mergeSort(ret, 0, ret.length - 1)
    return ret
};
